javascript是基于原型的语言
私有变量除非提供闭包接口   否则无法访问
字面量中的数据可以通过点语法访问   
有几种数据:

一种是外部的数据   通常我们要用数据结构来管理它  方便调用
一种是函数环境的数据(最常见的数据)   这些数据有生命周期  必须遵守作用域规则运行  函数结束之后这些数据就被回收
函数环境的数据的生命周期可以通过闭包来延长   (生命周期和作用域很类似)
一种是储存在DOM元素中的数据  这些数据是有无限生命周期  全局数据  并且不怕重名
函数的call()方法是用来获取处理数据的   它的运行也是要遵守作用域规则 
还有一种数据是原型数据(这些数据通常是函数)   常用于给类添加方法   在框架中大量使用  
//框架的设计就是   把一个对象或者托管给框架的对象添加类   然后这个类中有方法   这些对象就可以使用这些方法了
上面的理念就是jqery的设计原理    jQery.fn
//angular是把所有托管给框架的DOM元素添加类   $scope.add=function(){}
就是给所有的该作用域托管的DOM元素的原型下添加add方法   
模块化编程数据call获取 函数this,arguments化编程
//angular的数据是存储在DOM元素中的  html页面负责存储的是DOM元素的私有变量   
js文件的$scope页面是存储DOM元素的原型的数据    比较数据是DOM元素的私有变量和它的原型上的数据比较

//angular的$scope是暴露在angular自定义的link里面  比如ng-click 但是<p>{{data}}</p> 要加{{}}
//购物车中number的生命周期:
//变量的生命周期因为被引用而得到延续   如果cart是个生命周期很长的数组  它在一个函数中获得了一个临时对象(函数体中数据)
//这个临时对象的生命周期周期因为被引用而得到延续  一旦cart不再引用它  它将被回收(它存储的数据清空)

//toString和slice方法不破坏原始数据

//ajax请求回来的数据会在ajax函数运行完自动销毁  要得到请求回来的数据 要把它封装在二维中

面向数据结构编程
面向过程编程
面向模块化编程
面向数学相关性编程
面向函数编程
算法处理数据