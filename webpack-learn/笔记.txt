1.npm install webpack -g;
2.cd 项目
3.npm init --yes;
4.npm install webpack --save-dev;
5.根目录新建一个entry.js 里面写document.getElementById("app").textContent = "hello";
6.根目录新建一个index.html 里面写一个id为app的div,并且引入bundle.js
7.webpack entry.js bundle.js  会在根目录下生成一个bundle.js文件
8.打开index.html;
9.加入项目需要一个js文件  name.js;

10.name.js采用模块化的写法,webpack会分析编译这种语法
module.exports = "ninghao.net";

11.entry.js 里面写
var name = require('./name');
document.getElementById('app').textContent = "hello ~" + name;

这样使用webpack entry.js bundle.js命令后会编译,name拿到的就是name.js的exports的东西了

12.webpack默认只会编译js,如果要编译css等需要使用loader
使用loader插件  npm install css-loader style-loader --save-dev

13.entry.js添加内容:  表示使用style-loader和css-loader插件处理根目录下的style.css
require('style-loader!css-loader!./style.css');
执行webpack entry.js bundle.js命令后会编译,bundle.js就是拿到style.css中的样式了

14.webpack.config.js是webpack的配置文件,新建一个webpack.config.js来描述webpack要做的事
这样就不用重复的执行webpack entry.js bundle.js
只要输入 webpack就会执行webpack.config.js的内容

15.设置开发工具  webpack --devtool source-map   (调试代码用)
或者在webpack.config.js里面设置好source-map
16.在浏览器的source栏目,刷新,可以看到webpack目录下的.目录下面是没有打包之前的源文件

17.安装babel-loader babel-core babel-preset-es2015插件到项目中

18.安装webpack-dev-server到项目中,实现浏览器实时刷新
npm install webpack-dev-server -g 先安装到全局
npm install webpack-dev-server --save-dev 再安装到项目中
webpack-dev-server --inline --hot

这时候在浏览器的console区出现 Waiting for update signal from WDS(webpack-dev-server)
和Hot Module Replacement enabled
更改文件内容会发现浏览器自动更新

19.现在要使用react技术实现项目
npm install babel-core babel-preset-es2015 babel-preset-react webpack
webpack-dev-server babel-loader react-hot-loader --save-dev

20.npm install react react-dom --save （运行依赖）

21.在package.json中的script节点上写"watch": "webpack-dev-server --inline --hot"
这样就能使用webpack的server热更新了,但是仅仅是react的那部分才会
