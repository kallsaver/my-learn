0.借鉴yeoman脚手架工具的目录结构
app是项目的主要目录,下面有images,scripts,styles,views,index.html,404.html,.ico
1.npm init 或者npm init --yes(快速走默认流程)生成package.json
2.npm install gulp --save-dev 
3.项目要用到es6和react语法,所以npm install babel-cli --save-dev
4.npm install gulp-babel --save-dev; gulp的babel编译插件
5.根目录下新建.babelrc配置babel:这个配置文件最终会在package.json输出dev插件依赖
6.{
  "presets" : ["es2015","react"]
}
7.全局安装bower
8.假如项目依赖jquery,使用bower框架库包管理工具
9.在根目录下的.bowerrc下设置了bower install下载的库存放路径
{
  "directory":"app/bower_components"
}
10.在git bash貌似执行不了bower init(要先有.bowerrc文件和package.json文件)生成bower.json,可以在cmd命令中bower init
11.bower init 一路回车
bower install jquery只会在生成的bower_components库添加jquery库文件,不会输出到bower.json
12.bower install jquery --save才会在bower.json文件,在里面的dev插件依赖
13.npm install 一般使用--save-dev 因为都是开发依赖工具包
14.而bower是运行依赖包,一般使用 bower install --save而不是--save-dev
15.bower install 会读取bower.json中的开发依赖和运行依赖根据.bowerrc的配置下载库到bower_components
16.bower install jquery#3.1.1 --save 下载指定版本的jq
17.npm install http-server --save-dev
18.在package.json中的script节点中可以定义脚本任务
"scripts": {
  	"e": "echo hello",
  	//完成install后要执行这个命令
    "postinstall": "bower install",
    //运行start先执行这个命令
    "prestart": "npm install",
    //运行当前地址,把当前地址放在9000端口上
    "start": "./node_modules/.bin/hs -a localhost -p 9000 -o",
    "pretest": "npm install",
    //用来同步几个浏览器,方便单元测试
    "test": "./node_modules/.bin/browser-sync start --server app --files 'app/index.html' --no-notify"
 },
 19.从browser-sync官网的gulpfile.js文件,再改改开发过程够用了
 20.package.json的格式很严格,多一个,都不行
 21.http://blog.csdn.net/u011254082/article/details/51534394
 使用gulp-plumber插件处理编译错误进程挂起
