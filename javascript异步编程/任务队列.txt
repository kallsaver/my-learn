在单线程的javascript编程来说,所有的任务分为两种,一种是同步任务(synchronous),
另一种是异步任务(asynchronous)。同步任务指的是,在主线程上排队执行的任务,只有前一个任务执行完毕,
才能执行后一个任务,异步任务指的是,不进入主线程,而进入"任务队列"(task queue)的任务,
只有"任务队列"通知主线程,某个异步任务就可以执行了,该任务才会进入主线程执行。
具体来说就是:
1.所有的同步任务都在主线程上执行,形成一个执行栈(execution context stack)
2.主线程之外,还存在一个"任务队列"(task queue),只要异步任务有了运行结果,就在"任务队列"之中放置一个事件
3.一旦"执行栈"中的所有同步任务执行完毕,系统就会读取"任务队列",看看里面有哪些事件。
那些对应的异步任务,于是结束等待状态,进入执行栈,开始执行
4.主线程不断重复上面的第三步
只要主线程空了,就会读取"任务队列",这就是javascript的运行机制,这个过程会不断重复


Event Loop 是上面的第三步 这个过程是不断重复的
可以参考:
http://www.ruanyifeng.com/blog/2014/10/event-loop.html


setTimeout(function(){console.log(1);}, 0);
console.log(2);
上面代码的执行结果总是2,1，因为只有在执行完第二行以后,
系统才会去执行"任务队列"中的回调函数

需要注意的是，setTimeout()只是将事件插入了"任务队列"，必须等到当前代码（执行栈）执行完，
主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，
所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。

javascript写手如果称一个函数为"异步的",其意思是这个函数会导致将来再运行另一个函数
后者取自于事件队列(若后面这个函数是作为参数传递给前者的,则成为前者的回调函数)


