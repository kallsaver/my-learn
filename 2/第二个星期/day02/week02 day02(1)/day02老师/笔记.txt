运算符

运算符	描述	例子	    结果
+	加	x=y+2	    x=7  +运算符用于把文本值或字符串变量连接起来。
-	减	x=y-2	    x=3
*	乘	x=y*2	    x=10
/	除	x=y/2	    x=2.5
%	求余数  x=y%2	    x=1
++	累加	x=++y	    x=6
--	递减	x=--y	    x=4


赋值运算符
运算符	例子	等价于	结果
=	x=y	 	x=5
+=	x+=y	x=x+y	x=15
-=	x-=y	x=x-y	x=5
*=	x*=y	x=x*y	x=50
/=	x/=y	x=x/y	x=2
%=	x%=y	x=x%y	x=0


a++ 先参与运算，再自增
++a 先自增，再参与运算


b=a++;   // 相当于 b=a ; 然后a自己加1

b=++a;  // 相当于a自己加1,然后 b=a; (此时a已经先加1了)
--------------------------------------------------------
隐形转换

+:链接字符串或数字

- * / 隐形转换为数字


----------------------------------------------------------
逻辑运算符

&& ||
如果&&的第一个运算数是false，就不再考虑第二个运算数，直接返回false；如果||的第一个运算数是true，也不再考虑第二个运算数，直接返回true。

0、""、null、false、undefined、NaN都会判为false，其他都为true


---------------------------------------------------------
parseInt() 取整数       
parseFloat() 取浮点数

例：

parseInt（‘200px’）   //200

parseInt（‘sfsf’）   //NaN   无法转换为数字，返回NaN


--------------------------------------------------------
% 模运算（取余）

取模运算是实际就是求余
0%5 = 0
1%5 = 1
2%5 = 2
3%5 = 3
4%5 = 4
5%5 = 0
6%5 = 1
7%5 = 2
8%5 = 3
9%5 = 4
10%5 = 0
11%5 = 1
12%5 = 2
13%5 = 3
14%5 = 4
15%5 = 0
16%5 = 1


---------------------------------------------------------

setAttribute
设定属性

getAttribute
获取属性


用setAttribute设定的属性（attribute），用getAttribute 获取

用.语法设定的属性(property)，用.语法读取


---------------------------------------------------------
typeof

是一个运算符，它对操作数返回的结果是一个字符串，有6种(只针对ES，不包含HOST环境对象)

'undefined'
'boolean'
'string'
'number'
'object'
'function'

因为它本身是运算符，它不是函数，使用时没必要加个小括号

if (typeof(obj) === 'undefined') {
    // ...
}
 

typeof用来判断类型，它有几个坑

1. 对null（空对象）返回是'object'，你却不能真正当对象使用

var obj = null
if (typeof obj === 'object') {
    obj.a() // 这里报错
}
 

2. 对NaN返回是'number'，你却不能使用它进行算术运算

var obj = {}
var num = parseInt(obj.a)
if (typeof num === 'number') {
    num = num + 10 // 执行后num仍然是NaN
}

用isNaN（）判断是否为数字

 

3. 不能区分对象、数组、正则，对它们操作都返回'object'

var obj = {}
var arr = []
var reg = /pop/g
console.log(typeof obj) // 'object'
console.log(typeof arr) // 'object'
console.log(typeof reg) // 'object'
 

4. Safar5,Chrome7之前的版本对正则对象返回 'function'